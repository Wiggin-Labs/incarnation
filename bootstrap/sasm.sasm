;(define Token::LeftParen #'a')
;(define Token::RightParen #'b')
;(define Token::Symbol #'c')
;(define Token::Integer #'d')
;(define Token::Char #'e')
;(define Token::String #'f')
(define Token::LeftParen 0)
(define Token::RightParen 1)
(define Token::Symbol 2)
(define Token::Integer 3)
(define Token::Char 4)
(define Token::String 5)

start
    ;; Check that argc == 2
    (lw x10 x2)
    (addi x11 x0 2)
    (bne x10 x11 error-argc)

    ;; Open input file
    ;; openat(AT_FDCWD, input-name, O_RDONLY, 0)
    (addi x10 x0 -100)
    ;; argv[1]
    (ld x11 (+ x2 16))
    (add x12 x0 x0)
    (add x13 x0 x0)
    (addi x17 x0 56)
    (ecall)
    (blt x10 x0 error-open)

    ;; Read input file to buffer
    ;; mmap(NULL, 64k, PROT_READ, MAP_PRIVATE, fd, 0)
    (add x14 x0 x10)
    (add x10 x0 x0)
    (addi x11 x0 1)
    (slli x11 x11 16)
    (addi x12 x0 1)
    (addi x13 x0 2)
    (add x15 x0 x0)
    (addi x17 x0 222)
    (ecall)
    (blt x10 x0 error-read-input)
    (beq x10 x0 error-read-input)

    (add x31 x0 x10)

    ;; close(fd)
    (add x10 x0 x14)
    (addi x17 x0 57)
    (ecall)

    (add x10 x0 x31)
    (addi x11 x10 -1)
    read-file-length-loop
        (addi x11 x11 1)
        (lb x28 x11)
        (bne x28 x0 read-file-length-loop)

    (sd (- x2 8) x10)
    ;; Tokenize(input, input.len, tokens, tokens.capacity)
    ;; Allocate memory
    ;; Get current end
    ;; brk(0)
    (add x20 x0 x10)
    (add x10 x0 x0)
    (addi x17 x0 214)
    (ecall)
    (add x21 x0 x10)
    ;; 4k
    (addi x22 x0 1)
    (slli x22 x22 12)
    ;; brk(CURRENT_END+4k)
    (add x10 x10 x22)
    (addi x17 x0 214)
    (ecall)
    (add x13 x0 x10)
    (add x10 x0 x20)
    (add x12 x0 x21)

    (jal x1 tokenize)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Test tokenizer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(add x20 x0 x13)
;(addi x10 x0 1)
;(slli x10 x10 16)
;(add x10 x10 x13)
;(addi x17 x0 214)
;(ecall)
;(add x11 x13 x0)
;test-tokenizer-loop
;    (beq x12 x19 test-tokenizer-loop-write)
;    (lb x10 x12)
;    (addi x10 x10 97)
;    (sb x13 x10)
;    (addi x12 x12 16)
;    (addi x13 x13 1)
;    (jal x0 test-tokenizer-loop)
;test-tokenizer-loop-write
    ;; write(fd, msg, len)
;    (addi x10 x0 1)
;    ;(add x11 x0 x12)
;    ;(sub x12 x19 x11)
;    (sub x12 x13 x20)
;    (addi x17 x0 64)
;    (ecall)
;    ;; exit(0)
;    (add x10 x0 x0)
;    (addi x17 x0 93)
;    (ecall)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (ld x10 (- x2 8))
    ;(add x11 x0 x19 x10)
    ;;(sr x11 x11 x28)
    (jal x1 assemble)

    ; Get output file name
    (ld x11 (+ x2 16))
    (addi x21 x11 -1)
    (addi x22 x0 #'.')
    find-dot
        (addi x21 x21 1)
        (lb x28 x21)
        (beq x28 x0 load-default-output-name)
        (bne x28 x22 find-dot)
    (sb x21 x0)

    ;; Write to output file
    open-output-name
    ;; openat(AT_FDCWD, output-name, O_WRONLY|O_CREAT|O_TRUNC, 0o777)
    (addi x10 x0 -100)
    (addi x12 x0 577)
    (addi x13 x0 511)
    (addi x17 x0 56)
    (ecall)
    (blt x10 x0 error-open)

    ;; Save fd
    (add x28 x10 x0)
    ;; write(fd, msg, len)
    ;; TODO msg, len
    (addi x17 x0 64)
    (ecall)

    ;; close(fd)
    (add x10 x28 x0)
    (addi x17 x0 57)
    (ecall)

    ;; exit(0)
    (add x10 x0 x0)
    (addi x17 x0 93)
    (ecall)

    load-default-output-name
        (define default-output-name "bin.elf\0")
        (la x11 default-output-name)
        (jal x0 open-output-name)

    error-argc
        (addi x10 x0 1)
        (jal x0 exit-error)
    error-open
        (addi x10 x0 2)
        (jal x0 exit-error)
    error-read-input
        (addi x10 x0 3)
        (jal x0 exit-error)
    exit-error
        (addi x17 x0 93)
        (ecall)

;; Args:
;;  x10 - input: String
;;  x11 - len: input.len : pointer to end of input
;;  x12 - tokens: ArrayBuf<(Token, len, start)>
;;  x13 - capacity: tokens.capacity : pointer to end of tokens capacity
;; Locals:
;;  x30 - Current token type
;;  x31 - Start of current token
tokenize
    ;; position in tokens
    (add x19 x0 x12)
    tokenize-loop
        (beq x10 x11 tokenize-after-loop)

        ;; Matching char
        (lb x28 x10)
        (add x31 x10 x0)
        (addi x10 x10 1)

        (subi x29 x28 #'(')
        (addi x30 x0 Token::LeftParen)
        (beq x29 x0 tokenize-loop-push-token)

        (subi x29 x28 #')')
        (addi x30 x0 Token::RightParen)
        (beq x29 x0 tokenize-loop-push-token)

        (subi x29 x28 #'"')
        (beq x29 x0 tokenize-string)

        (subi x29 x28 #'#')
        (beq x29 x0 tokenize-literal)

        (subi x29 x28 #';')
        (beq x29 x0 tokenize-comment)

        ;; Skip whitespace
        (subi x29 x28 #' ')
        (beq x29 x0 tokenize-loop)
        (subi x29 x28 #'\t')
        (beq x29 x0 tokenize-loop)
        (subi x29 x28 #'\r')
        (beq x29 x0 tokenize-loop)
        (subi x29 x28 #'\n')
        (beq x29 x0 tokenize-loop)

        ;; Ambiguous, could be a symbol or an integer
        (subi x29 x28 #'0')
        (addi x6 x0 11)
        (bltu x29 x6 tokenize-ambiguous)
        (subi x29 x28 #'+')
        (beq x29 x0 tokenize-ambiguous)
        (subi x29 x28 #'-')
        (beq x29 x0 tokenize-ambiguous)

        (jal x0 tokenize-identifier)

        tokenize-loop-push-token
            (beq x19 x13 tokenize-loop-alloc)
            tokenize-loop-after-alloc
            (sb x19 x30)
            (sd (+ x19 8) x31)
            (sub x31 x10 x31)
            (sw (+ x19 4) x31)
            (addi x19 x19 16)
            (jal x0 tokenize-loop)

            tokenize-loop-alloc
                (add x23 x0 x10)
                ;; 4k
                (addi x22 x0 1)
                (slli x22 x22 12)
                ;; brk(CURRENT_END+4k)
                (add x10 x13 x22)
                (addi x17 x0 214)
                (ecall)
                (add x13 x0 x10)
                (add x10 x0 x23)
                (jal x0 tokenize-loop-after-alloc)

    tokenize-after-loop
        (jalr x0 x1)

    tokenize-string
        (addi x30 x0 Token::String)
    tokenize-string-loop
        (beq x10 x11 tokenize-string-error)
        (lb x28 x10)
        (addi x10 x10 1)

        (subi x29 x28 #'\\')
        (beq x29 x0 tokenize-string-escape)
        (subi x29 x28 #'"')
        (bne x29 x0 tokenize-string-loop)
    tokenize-string-done
        (jal x0 tokenize-loop-push-token)
    tokenize-string-escape
        (beq x10 x11 tokenize-string-error)
        (lb x28 x10)
        (addi x10 x10 1)

        (subi x29 x28 #'r')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'n')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'t')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'0')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'\\')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'"')
        (beq x29 x0 tokenize-string-loop)
    tokenize-string-error
        (addi x10 x0 20)
        (addi x17 x0 93)
        (ecall)

    tokenize-literal
        (beq x10 x11 tokenize-literal-error)
        (lb x28 x10)
        (addi x10 x10 1)
        (subi x28 x28 #'\'')
        (bne x28 x0 tokenize-literal-error)

        (beq x10 x11 tokenize-literal-error)
        (lb x28 x10)
        (addi x10 x10 1)
        (subi x29 x28 #'\'')
        (beq x29 x0 tokenize-literal-error)
        (subi x29 x28 #'\\')
        (bne x29 x0 tokenize-literal-close)

        (beq x10 x11 tokenize-literal-error)
        (lb x28 x10)
        (addi x10 x10 1)
        (subi x29 x28 #'\\')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'\'')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'r')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'n')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'t')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'0')
        (beq x29 x0 tokenize-literal-close)

        (jal x0 tokenize-literal-error)
    tokenize-literal-close
        (beq x10 x11 tokenize-literal-error)
        (lb x28 x10)
        (addi x10 x10 1)
        (subi x28 x28 #'\'')
        (bne x28 x0 tokenize-literal-error)
        (addi x30 x0 Token::Char)
        (jal x0 tokenize-loop-push-token)
    tokenize-literal-error
        (addi x10 x0 21)
        (addi x17 x0 93)
        (ecall)

    tokenize-ambiguous
        (beq x10 x11 distinguish-ambiguous)

        (lb x28 x10)
        (addi x10 x10 1)

        ;; Still ambiguous
        (subi x29 x28 #'0')
        (addi x6 x0 11)
        (bltu x29 x6 tokenize-ambiguous)
        (subi x29 x28 #'+')
        (beq x29 x0 tokenize-ambiguous)
        (subi x29 x28 #'-')
        (beq x29 x0 tokenize-ambiguous)


        ;; Delimiter
        (subi x29 x28 #')')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #'(')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #'#')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #';')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #'"')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #' ')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'\t')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'\r')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'\n')
        (beq x29 x0 distinguish-ambiguous)

        (jal x0 tokenize-identifier)

    ;; There is some other token that we need to account for after this, so we move our cursor back.
    distinguish-ambiguous-pair
        (subi x10 x10 1)
        (add x20 x0 x31)
    distinguish-ambiguous
    distinguish-ambiguous-intp
        (lb x6 x20)
        (subi x7 x6 #'+')
        (beq x7 x0 distinguish-ambiguous-intp-skip-sign)
        (subi x7 x6 #'-')
        (bne x7 x0 distinguish-ambiguous-intp-loop)
        distinguish-ambiguous-intp-skip-sign
            (addi x20 x20 1)
            ;; Needed in case the ambiguous input is just a sign.
            (sub x6 x20 x10)
            (beq x6 x0 distinguish-ambiguous-symbol)

        distinguish-ambiguous-intp-loop
            (lb x6 x20)
            (addi x20 x20 1)
            (subi x6 x6 #'0')
            (addi x7 x0 11)
            (bgeu x29 x7 distinguish-ambiguous-symbol)
            (bne x20 x10 distinguish-ambiguous-intp-loop)
        distinguish-ambiguous-int
            (addi x30 x0 Token::Integer)
            (jal x0 tokenize-loop-push-token)
        distinguish-ambiguous-symbol
            (addi x30 x0 Token::Symbol)
            (jal x0 tokenize-loop-push-token)

    tokenize-identifier
        (addi x30 x0 Token::Symbol)
        tokenize-identifier-loop
            (beq x10 x11 tokenize-loop-push-token)

            (lb x28 x10)
            (addi x10 x10 1)

            ;; delimiters
            (subi x29 x28 #'\r')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'\n')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'\t')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #' ')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'#')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'"')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'(')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #')')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #';')
            (beq x29 x0 tokenize-identifier-after-loop)

            (jal x0 tokenize-identifier-loop)
        tokenize-identifier-after-loop
            (subi x10 x10 1)
            (jal x0 tokenize-loop-push-token)

    tokenize-comment
        (beq x10 x11 tokenize-after-loop)

        (lb x28 x10)
        (addi x10 x10 1)
        (subi x28 x28 #'\n')
        (beq x28 x0 tokenize-loop)
        (jal x0 tokenize-comment)

;; Args:
;;  x10 - input: String
;;  x11 - len: tokens.len
;;  x12 - tokens: ArrayBuf<(Token, len, start)>
;;  x13 - output: ArrayBuf<u32>
;;  x14 - capacity: output.capacity
;; Locals:
assemble
assemble-loop
    (sub x28 x12 x11)
    (beq x28 x0 assemble-after-loop)

    (lb x28 x12)
    (lh x29 (+ 2 x12))
    (lw x30 (+ 4 x12))
    (addi x12 x12 8)

    (addi x31 x0 1)
assemble-after-loop
